<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.abcde.cultureStay.dao.ProgramDAO">

	<!--///////// 가장 첫 메인 홈 화면 ///////// -->
	<!-- 인기 프로그램 --><!-- 수정해야댐 -->
	<select id="homePopular" resultType="Program">
		SELECT P.*
		FROM Program P
		JOIN (
		SELECT programNum, COUNT(*) AS like_count
		FROM Program_like
		WHERE inputdate >= SYSDATE - 14
		GROUP BY programNum
		) PL ON P.programNum = PL.programNum
		WHERE P.inputdate >= SYSDATE - 14
		ORDER BY PL.like_count DESC
	</select>
	<!-- 유저별 추천 프로그램 -->	<!-- 수정해야댐 -->
	<select id="homeRecommend" parameterType="String"
		resultType="Program">
		 <![CDATA[
        WITH CombinedData AS (
            SELECT programNum, inputdate
            FROM (
                SELECT
                    programNum,
                    inputdate,
                    ROW_NUMBER() OVER (PARTITION BY programNum ORDER BY inputdate DESC) AS rn
                FROM recentClick
                WHERE userid = #{id}
            )
            WHERE rn = 1

            UNION

            SELECT programNum, inputdate
            FROM (
                SELECT
                    programNum,
                    inputdate,
                    ROW_NUMBER() OVER (PARTITION BY programNum ORDER BY inputdate DESC) AS rn
                FROM Program_bookmark
                WHERE userid = #{id}
                AND ROWNUM <= 5
            )
            
            UNION

            SELECT programNum, inputdate
            FROM (
                SELECT
                    programNum,
                    inputdate,
                    ROW_NUMBER() OVER (PARTITION BY programNum ORDER BY inputdate DESC) AS rn
                FROM Program_like
                WHERE userid = #{id}
                AND ROWNUM <= 5
            )
        )
        SELECT cd.programNum, p.*
        FROM CombinedData cd
        JOIN Program p ON cd.programNum = p.programNum
        JOIN (
            SELECT programNum, MAX(inputdate) AS maxInputDate
            FROM CombinedData
            GROUP BY programNum
        ) maxData ON cd.programNum = maxData.programNum AND cd.inputdate = maxData.maxInputDate
        ORDER BY p.hits DESC
        ]]>
	</select>

	<!-- ///////////프로그램 화면////////////// --><!-- 수정해야댐 -->
	<select id="programMainlist" parameterType="Map"
		resultType="Program">
	
	SELECT *
	FROM Program
	<if test="searchWord != null">
	    <where>
	        upper(title) like '%' || upper(#{searchWord}) || '%'
	    </where>
	</if>
	ORDER BY inputdate DESC
	
	</select>

	<!-- 글쓰기 -->
	<insert id="pWrite" parameterType="Program">
		insert into Program
		(
		programNum
		, userid
		, title
		, content
		, postcode
		, address
		, detailed_address
		, price

		, start_date
		, end_date

		) values (
		programNum_seq.nextval
		, #{userid}
		, #{title}
		, #{content}
		, #{postcode}
		, #{address}
		, #{detailed_address}
		, #{price}

		, #{start_date}
		, #{end_date}
		)
	</insert>
	
	<select id="pnumCheck" parameterType="String"
		resultType="int">
	SELECT programNum
	FROM program
	WHERE userid = #{username}
	ORDER BY inputdate DESC
	FETCH FIRST 1 ROW ONLY
	</select>


	<select id="readProgram" parameterType="int"
		resultType="Program">

		select * from
		Program
		where
		programNum = #{programNum}

	</select>
	
	<!-- 글쓰기-태그넣기 -->
	<insert id="tagInsert" parameterType="ProgramTag">
		insert into ProgramTag
		(
		programNum
		, apartment
		, detached
		
		, active
		, creative
		, healing
		, traditional
		, cookingExperience
		, scenicView
		, countryside
		, city
		, festival
		, drive
		, socializing
		, tranquil
		
		, separateBathroom
		, bathtub
		, wifi
		, transformer
		, pajamasProvided
		, hairdryer
		, basicToiletriesProvided
		, petFriendly
		, roomAlone
		, langJapanese
		, langEnglish
		, langKorean
		
		) values (
		 #{programNum}
		,#{apartment}
		,#{detached}
		
		,#{active}
		,#{creative}
		,#{healing}
		,#{traditional}
		,#{cookingExperience}
		,#{scenicView}
		,#{countryside}
		,#{city}
		,#{festival}
		,#{drive}
		,#{socializing}
		,#{tranquil}
		
		,#{separateBathroom}
		,#{bathtub}
		,#{wifi}
		,#{transformer}
		,#{pajamasProvided}
		,#{hairdryer}
		,#{basicToiletriesProvided}
		,#{petFriendly}
		,#{roomAlone}
		,#{langJapanese}
		,#{langEnglish}
		,#{langKorean}
		)
	</insert>
		<!-- 글쓰기-태그넣기 -->
	<insert id="reserveChecklist" parameterType="Checklist">
		insert into Checklist
		(
		checklistID
		, programNum
		, reserNum
		, userid
		
		, petFriendly
		, allergyFriendly
		, chronicIllness
		, foodPreference
		, privateTime
		, preferredProgramType
		, languageSupport
		, smoking
		
		) values (
		checklistID_seq.nextval		
		,#{programNum}
		,#{reserNum}
		,#{userid}
		
		,#{petFriendly}
		,#{allergyFriendly}
		,#{chronicIllness}
		,#{foodPreference}
		,#{privateTime}
		,#{preferredProgramType}
		,#{languageSupport}
		,#{smoking}

		)
	</insert>
	

	<!-- 수정해야댐 -->
	<insert id="recentClick" parameterType="map">
		insert into recentClick
		(
		clickNum
		,programNum
		, userid


		) values (
		clickNum_seq.nextval
		, #{programNum}
		, #{userid}

		)

	</insert>


	<select id="pReviewList" parameterType="int" resultType="Reply">
		select
		*
		from
		Review
		where
		programNum = #{programNum}
		order by
		reviewNum
	</select>

	<update id="p_updateHits" parameterType="int">
		update
		Program
		set
		hits =
		hits + 1
		where
		programNum = #{programNum}
	</update>

	<select id="readProgramTag" parameterType="int"
		resultType="ProgramTag">
		select
		*
		from
		ProgramTag
		where
		programNum = #{programNum}
	</select><!-- 수정해야댐 -->

	<!-- 좋아요 -->
	<select id="likeCheck" parameterType="map" resultType="Integer">
		SELECT
		count(*)
		FROM Program_like
		WHERE programNum = #{programNum} AND userid =
		#{userid}
	</select>




	<insert id="createLike" parameterType="map">
		insert into Program_like
		(
		p_like_num
		,userid
		,programNum
		)
		values (
		p_like_num_seq.nextval
		, #{userid}
		, #{programNum}
		)

	</insert>

	<delete id="deleteLike" parameterType="map">
		delete
		Program_like
		where
		programNum = #{programNum}
		and userid = #{userid}

	</delete>


	<!-- 북마크 -->
	<select id="bookmarkCheck" parameterType="map"
		resultType="Integer">
		SELECT count(*)
		FROM Program_bookmark
		WHERE programNum =
		#{programNum} AND userid = #{userid}
	</select>

	<insert id="createBookmark" parameterType="map">
		insert into
		Program_bookmark
		( bookmark_num
		,userid
		,programNum
		)
		values (
		bookmark_num_seq.nextval
		, #{userid}
		, #{programNum}
		)

	</insert>

	<delete id="deleteBookmark" parameterType="map">
		delete
		Program_bookmark
		where
		programNum = #{programNum}
		and userid = #{userid}
	</delete>

	<insert id="insertReserveForm" parameterType="Reservation">
		insert into Reservation
		(
		reserNum
		, programNum
		, hostid	
		, userid
		, start_date
		, end_date
		, request
		

		) values (
		reserNum_seq.nextval
		,#{programNum}
		,#{hostid}
		,#{userid}
		,#{start_date}
		,#{end_date}
		,#{request}		
		)
	</insert>
	

	<insert id="insertChlist" parameterType="Checklist">
		insert into Checklist
		(
		checklistID
		, programNum
		, reserNum
		, userid
		
		, one
		, two
		, three
		, four
		, five
		, six
		, seven
		, eight
		, nine
		, ten
	
		) values (
		checklistID_seq.nextval
		,#{programNum}
		,#{reserNum}
		,#{userid}
		
		,#{one}
		,#{two}
		,#{three}
		,#{four}
		,#{five}
		,#{six}
		,#{seven}
		,#{eight}
		,#{nine}
		,#{ten}
		)
	</insert>
	
	
	<select id="newReser" parameterType="String" resultType="Reservation">
		select
			*
		from
			Reservation
		where
			hostid = #{userid}
		ORDER BY inputdate ASC
		
	</select>
	
	<select id="getReserNum" parameterType="map"
		resultType="int">
	SELECT reserNum
	FROM Reservation
	WHERE programNum = #{programNum}
		and userid = #{userid}
	ORDER BY inputdate DESC
	FETCH FIRST 1 ROW ONLY
		</select>
	 
	<update id="setReserNum" parameterType="map">
		update
		Checklist
		set
		reserNum = #{reserNum}
		where
		programNum = #{programNum}
		and userid = #{userid}
		AND inputdate = (SELECT MAX(inputdate) FROM Checklist WHERE programNum = #{programNum} AND userid = #{userid})

	</update>
	
	<select id="myProgram" parameterType="String" resultType="Program">
	SELECT *
	FROM Program
	WHERE userid = #{userid}
		</select>
		
	<select id="getReservation" parameterType="int" resultType="Reservation">
	SELECT *
	FROM Reservation
	WHERE reserNum = #{reserNum}
	</select>
	
	<update id="acceptReser" parameterType="int">
		update
		Reservation
		set
		status = 1
		where
		reserNum = #{reserNum}
	</update>
	
	<select id="myReservation" parameterType="String" resultType="Reservation">
	SELECT *
	FROM Reservation
	WHERE userid = #{userid}
	</select>
	
	
<!-- 후기 -->
	<insert id="guestReview" parameterType="Review">
		insert into Review
		(
		reviewNum
		, programNum
		, customerID
		, hostID
		, reviewerID
		, reserNum
		
		, stars
		, content
		, who
 
		) values (
		reviewNum_seq.nextval
		, #{programNum}
		, #{customerID}
		, #{hostID}
		, #{reviewerID}
		, #{reserNum}
		
		, #{stars}
		, #{content}
		, 'g'
		)
	</insert>
	
	<insert id="hostReview" parameterType="Review">
		insert into Review
		(
		reviewNum
		, programNum
		, customerID
		, hostID
		, reviewerID
		, reserNum
		
		, stars
		, content
 		, who
		) values (
		reviewNum_seq.nextval
		, #{programNum}
		, #{customerID}
		, #{hostID}
		, #{reviewerID}
		, #{reserNum}
		
		, #{stars}
		, #{content}
		, 'h'
		)
	</insert>
	
	<insert id="programReview" parameterType="Review">
		insert into Review
		(
		reviewNum
		, programNum
		, customerID
		, hostID
		, reviewerID
		, reserNum
		
		, stars
		, content
		, who
 
		) values (
		reviewNum_seq.nextval
		, #{programNum}
		, #{customerID}
		, #{hostID}
		, #{reviewerID}
		, #{reserNum}
		
		, #{stars}
		, #{content}
		, 'p'
		)
	</insert>
	
	
	
	
	<!-- get리뷰들 -->
	<select id="getHostReview" parameterType="int" resultType="Review">
	SELECT *
	FROM Review
	WHERE programNum = #{programNum}
		and who = 'h'
	</select>
	<select id="getProgramReview" parameterType="int" resultType="Review">
	SELECT *
	FROM Review
	WHERE programNum = #{programNum}
		and who = 'p'
	</select>
	
	<select id="getGuestReview" parameterType="String" resultType="Review">
	SELECT *
	FROM Review
	WHERE customerID = #{userid}
		and who = 'g'
	</select>
	<select id="getMyReview" parameterType="String" resultType="Review">
	SELECT *
	FROM Review
	WHERE reviewerID = #{userid}
		
	</select>
	
</mapper>